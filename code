#include <Arduino.h>
#include <micro_ros_arduino.h>
#include <WiFi.h>

#include <stdio.h>
#include <rcl/rcl.h>
#include <rcl/error_handling.h>
#include <rclc/rclc.h>
#include <rclc/executor.h>

#include <std_msgs/msg/int32.h>

// Motor pin definitions
const int IN1 = 33;   
const int IN2 = 25;   
const int ENA = 26;   
const int IN3 = 27;   
const int IN4 = 14;   
const int ENB = 12;   

const int sensorPin = 32; 

const int SPEED = 255;  

boolean motorsRunning = false;  
boolean lastState = LOW;       
boolean isClapDetected = false;  

const char* ssid = "A";     
const char* password = "0987654321"; 

rcl_publisher_t publisher;
std_msgs_msg_Int32 msg;

rclc_executor_t executor;
rclc_support_t support;
rcl_allocator_t allocator;
rcl_node_t node;
rcl_timer_t timer;

#define LED_PIN 2
#define RCCHECK(fn) { rcl_ret_t temp_rc = fn; if((temp_rc != RCL_RET_OK)){error_loop();}}
#define RCSOFTCHECK(fn) { rcl_ret_t temp_rc = fn; if((temp_rc != RCL_RET_OK)){}}

void error_loop() {
  while (1) {
    digitalWrite(LED_PIN, !digitalRead(LED_PIN));
    delay(100);
  }
}

// Callback function for timer to publish sound data periodically
void timer_callback(rcl_timer_t * timer, int64_t last_call_time) {
  if (timer == NULL) return;

  // Read and publish sound data
  msg.data = analogRead(sensorPin);  
  RCSOFTCHECK(rcl_publish(&publisher, &msg, NULL));
}

void micro_ros_task(void *pvParameters) {
  allocator = rcl_get_default_allocator();
  RCCHECK(rclc_support_init(&support, 0, NULL, &allocator));
  RCCHECK(rclc_node_init_default(&node, "micro_ros_sound_node", "", &support));
  
  // Initialize publisher
  RCCHECK(rclc_publisher_init_default(
    &publisher,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
    "/sound_data"));

  // Initialize timer for publishing at 10Hz (100 ms interval)
  const unsigned int timer_timeout = 100; 
  RCCHECK(rclc_timer_init_default(
    &timer,
    &support,
    RCL_MS_TO_NS(timer_timeout),
    timer_callback));

  // Initialize executor
  RCCHECK(rclc_executor_init(&executor, &support.context, 1, &allocator));
  RCCHECK(rclc_executor_add_timer(&executor, &timer));

  while (1) {
    RCSOFTCHECK(rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100)));
    delay(100);
  }
}

void setup() {
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(ENA, OUTPUT);
  
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
  pinMode(ENB, OUTPUT);

  pinMode(sensorPin, INPUT);

  // Initially stop the motors
  move_stop();
  
  pinMode(LED_PIN, OUTPUT);
  pinMode(sensorPin, INPUT);

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("Connected to WiFi");

  // Initialize the micro-ROS transport
  set_microros_wifi_transports((char*)ssid, (char*)password, (char*)"192.168.218.222", 8888);  

  // Create FreeRTOS task for micro-ROS
  xTaskCreate(micro_ros_task, "micro_ros_task", 10000, NULL, 1, NULL);
}

void loop() {
  int sensorState = digitalRead(sensorPin); 

  // Detect a clap
  if (sensorState == HIGH && lastState == LOW && !isClapDetected) {
    isClapDetected = true;  
    toggle_motors();        
    delay(500);             
  }

  // Reset the clap detection flag
  if (sensorState == LOW) {
    isClapDetected = false;
  }

  lastState = sensorState;
}

void toggle_motors() {
  if (motorsRunning) {
    move_stop();  
  } else {
    move_front(); 
  }
}

void move_stop() {
  // Stop the motors
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, LOW);
  analogWrite(ENA, 0); 

  digitalWrite(IN3, LOW);
  digitalWrite(IN4, LOW);
  analogWrite(ENB, 0); 

  motorsRunning = false;  
  Serial.println("Motors stopped.");
}

void move_front() {
  // Move motors forward
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, HIGH);
  analogWrite(ENA, SPEED);

  digitalWrite(IN3, LOW);
  digitalWrite(IN4, HIGH);
  analogWrite(ENB, SPEED);

  motorsRunning = true;  
  Serial.println("Motors moving forward...");
}
